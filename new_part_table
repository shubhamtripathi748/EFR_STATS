CREATE PROCEDURE your_procedure()
BEGIN
    -- Declare variables
    DECLARE x_channel_id VARCHAR(255);
    DECLARE final_query VARCHAR(500);

    -- Your original JSON extraction
    SET x_channel_id = JSON_UNQUOTE(JSON_EXTRACT(JSON_UNQUOTE(JSON_EXTRACT(ms.HEADER_INFO, '$."x-channel-id"')), '$[0]'));

    -- Construct final query using CONCAT
    SET final_query = CONCAT('SELECT * FROM your_table WHERE x_channel_id_column = "', x_channel_id, '"');

    -- Execute the final query
    PREPARE stmt FROM final_query;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END //

-- Declare variables
    DECLARE x_channel_id VARCHAR(255);
    DECLARE final_query VARCHAR(500);

    -- Your original JSON extraction
    SET x_channel_id = JSON_UNQUOTE(JSON_EXTRACT(JSON_UNQUOTE(JSON_EXTRACT(ms.HEADER_INFO, '$."x-channel-id"')), '$[0]'));




JSON_UNQUOTE(JSON_EXTRACT( JSON_UNQUOTE(JSON_EXTRACT(ms.HEADER_INFO, '$."x-channel-id"')), '$[0]'))
DELIMITER //

CREATE PROCEDURE fetch_data_by_partition(IN partition_value VARCHAR(255))
BEGIN
    -- Declare variables
    DECLARE dynamic_sql VARCHAR(500);

    -- Construct dynamic SQL with the partition value
    SET dynamic_sql = CONCAT('SELECT * FROM your_table PARTITION (', partition_value, ');');

    -- Execute the dynamic SQL
    PREPARE stmt FROM dynamic_sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END //

DELIMITER ;


DELIMITER //

CREATE PROCEDURE drop_partition_if_exists(
    IN table_name VARCHAR(255),
    IN partition_name VARCHAR(255)
)
BEGIN
    DECLARE partition_exists INT;

    -- Check if the partition exists
    SELECT COUNT(*)
    INTO partition_exists
    FROM information_schema.partitions
    WHERE table_schema = DATABASE()
        AND table_name = table_name
        AND subpartition_name = partition_name;

    -- Drop the partition if it exists
    IF partition_exists > 0 THEN
        SET @sql = CONCAT('ALTER TABLE ', table_name, ' DROP PARTITION ', partition_name);
        PREPARE stmt FROM @sql;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;
        SELECT 'Partition dropped successfully.' AS result;
    ELSE
        SELECT 'Partition does not exist.' AS result;
    END IF;
END //

DELIMITER ;




CREATE TABLE test_table (
    id INT,
    requesttimestamp datetime
) PARTITION BY RANGE (extract(year_month from `requesttimestamp`)) (
    PARTITION p_before_2024 VALUES LESS THAN (202400),
    PARTITION p_2024_01 VALUES LESS THAN (202401),
    PARTITION p_2024_02 VALUES LESS THAN (202402),
    PARTITION p_max VALUES LESS THAN (MAXVALUE)
);

CREATE TABLE test_table (
    id INT,
    requesttimestamp TIMESTAMP
) PARTITION BY RANGE (extract(year_month from `requesttimestamp`)) (
    PARTITION p_before_2024 VALUES LESS THAN (202400),
    PARTITION p_2024_01 VALUES LESS THAN (202401),
    PARTITION p_2024_02 VALUES LESS THAN (202402),
    PARTITION p_max VALUES LESS THAN (MAXVALUE)
);


Create a New Partitioned Table:

CREATE TABLE your_table_new (
    id INT,
    datetimestamp TIMESTAMP,
    -- other columns...
) PARTITION BY RANGE COLUMNS (YEAR(datetimestamp), MONTH(datetimestamp)) (
    PARTITION p_before_2024 VALUES LESS THAN (TO_DAYS('2024-01-01')),
    PARTITION p_2024_01 VALUES LESS THAN (TO_DAYS('2024-02-01')),
    PARTITION p_2024_02 VALUES LESS THAN (TO_DAYS('2024-03-01')),
    -- Add more partitions as needed
    PARTITION p_max VALUES LESS THAN (MAXVALUE, MAXVALUE)
);
Copy Data from the Old Table to the New Table:
INSERT INTO your_table_new
SELECT * FROM your_table;

RENAME TABLE your_table TO your_table_backup, your_table_new TO your_table;
